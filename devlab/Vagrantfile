# -*- mode: ruby -*-
# vi: set ft=ruby ts=2 sw=2 et sua= inex= :

config_file = "config.ini"
options = {}
File.foreach(config_file) { |line|
  option, value = line.split("=")
  option = option.strip()
  if !value.nil?
    value = value.strip()
    options[option] = value
  end
}

user = %x(id -un).strip()
uid = %x(id -u #{user}).strip()

nodes = {
  "grizzly" => {
    "box" => "openstack-user/precise-grizzly",
    "ip" => "#{options['grizzly_ip']}",
    "memory" => 4096,
    "role" => "openstack"
  },
  "icehouse" => {
    "box" => "openstack-user/precise-icehouse",
    "ip" => "#{options['icehouse_ip']}",
    "memory" => 4096,
    "role" => "openstack"
  },
  "cloudferry" => {
    "box" => "hashicorp/precise64",
    "ip" => "#{options['cloudferry_ip']}",
    "memory" => 2048,
    "role" => "dev"
  }
}

Vagrant.require_version '>= 1.6.0'

Vagrant.configure(2) do |config|
  config.vm.provision "shell", path: "./provision/prerequisites.sh"

  nodes.each do |nodename, nodedata|
    config.vm.define nodename do |thisnode|
      thisnode.vm.box = nodedata['box']
      thisnode.vm.hostname = nodename

      case nodedata.fetch("role")
        when "openstack"
          thisnode.vm.provision "shell",
            path: "./provision/keys.sh",
            args: [ "--public-key", File.read("#{ENV["HOME"]}/#{options['public_key_path']}").strip() ]
        when "dev"
          thisnode.vm.provision "shell",
            path: "./provision/user.sh",
            args: [ "--user", user, "--uid", uid ]
          thisnode.vm.synced_folder ENV["HOME"], "/home/#{user}", type: "nfs"
          thisnode.vm.provision "shell",
            path: "./provision/cloudferry.sh",
            args: [ "--cloudferry-path", "#{options['cloudferry_path']}",
                    "--user", user ]
      end

      if nodedata.has_key?("ip") then
        thisnode.vm.network "private_network", ip: nodedata['ip']
      end

      thisnode.vm.provider "virtualbox" do |v|
        v.memory = nodedata.fetch("memory", 1024)
        v.cpus = nodedata.fetch("cpus", 2)
      end
    end
  end
end
